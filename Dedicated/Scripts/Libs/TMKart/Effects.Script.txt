//#RequireContext CSmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/Nadeo/CMGame/Modes/Legacy/Layers2.Script.txt"    as Layers

#Include "Libs/TMKart/UI/GameUI.Script.txt"                 as GameUI
#Include "Libs/TMKart/UI/EffectInkSplats.Script.txt"        as InkSplats
#Include "Libs/TMKart/UI/PlayerEffects.Script.txt"          as PlayerEffects
#Include "Libs/TMKart/UI/EffectBoxLayer.Script.txt"         as EffectBoxLayer
#Include "Libs/TMKart/UI/EventFeed.Script.txt"              as EventFeed
#Include "Libs/TMKart/UI/MapName.Script.txt"                as MapNameLayer

/////////////
// Structs //
/////////////

/**
* You must sync this structure with Libs/TMKart/UI/EffectBoxLayer.Script.txt equalent one
*/
#Struct K_BoxEffect {
    Text        Name;
    Text        Marker;
    Text        TargetMode;
    Integer     Duration;
    Text        Function;
    Text        ImageURL;
    Text        Color;
}

#Struct K_BoxEffectOnPlayer {
    K_BoxEffect     Effect;
    Integer         StartAt;
    Integer         EndAt;
    Text            Login;
}

///////////
// Plugs //
///////////

declare K_BoxEffect[] G_EffectsList;
declare K_BoxEffectOnPlayer[Text] G_EffectOnPlayer;
declare K_BoxEffect[Text] G_PlayerEffect;

///////////////
// Functions //
///////////////

K_BoxEffect GetEffectByIndex(Integer Index) {
    if (G_EffectsList.existskey(Index)) return G_EffectsList[Index];
    return K_BoxEffect{};
}

K_BoxEffect GetRandomEffect() {
    return GetEffectByIndex(MathLib::Rand(1, G_EffectsList.count - 1));
}

Integer GetPlayerPosition(Text Login) {
    declare CSmPlayer Player = GetPlayer(Login);
    if (Player != Null) {
        declare Text Dossard = TextLib::RegexReplace("^0", Player.Dossard, "", "");
        return TextLib::ToInteger(Dossard);
    }
    return -1;
}

Integer GetPlayerPosition(CSmPlayer Player) {
    return GetPlayerPosition(Player.User.Login);
}


CSmPlayer GetFirstPlayer() {
    foreach (Player in Players) {
        declare Text Dossard = TextLib::RegexReplace("^0", Player.Dossard, "", "");
        if (TextLib::ToInteger(Dossard) == 1) {
            return Player;
        }
    }
    return Null;
}

Void InitEffects() {
    // None effect
    declare K_BoxEffect NoneEffect;
    NoneEffect.Name       = "None";
    NoneEffect.Marker     = "e_none";
    NoneEffect.TargetMode = "none";
    NoneEffect.Duration   = 0;
    NoneEffect.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968911908595961876/nothing.png";
    NoneEffect.Color      = "fff";
    G_EffectsList.add(NoneEffect);

    // Thunder // NoEngine
    declare K_BoxEffect Thunder;
    Thunder.Name       = "No Engine";
    Thunder.Marker     = "e_thunder";
    Thunder.Function   = "SetPlayer_Delayed_NoEngine";
    Thunder.TargetMode = "nearest";
    Thunder.Duration   = 5000;
    Thunder.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968907448045948938/thunder.png";
    Thunder.Color      = "ff0";
    G_EffectsList.add(Thunder);

    // CruiseControlAll
    declare K_BoxEffect ForceCruiseControlAll;
    ForceCruiseControlAll.Name       = "Force Cruise Control";
    ForceCruiseControlAll.Marker     = "e_cruise_all";
    ForceCruiseControlAll.TargetMode = "nearest";
    ForceCruiseControlAll.Duration   = 3500;
    ForceCruiseControlAll.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968908512602255370/cruisecontrol.png";
    ForceCruiseControlAll.Color      = "0d0";
    G_EffectsList.add(ForceCruiseControlAll);

    // Turbo
    declare K_BoxEffect Turbo;
    Turbo.Name       = "Reactor Boost";
    Turbo.Marker     = "e_turbo_self";
    Turbo.TargetMode = "self";
    Turbo.Duration   = 2500;
    Turbo.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968909707366506496/boost1.png";
    Turbo.Color      = "f90";
    G_EffectsList.add(Turbo);

    // Turbo2
    declare K_BoxEffect SuperTurbo;
    SuperTurbo.Name       = "Super Reactor Boost";
    SuperTurbo.Marker     = "e_turbo2_self";
    SuperTurbo.TargetMode = "self";
    SuperTurbo.Duration   = 2500;
    SuperTurbo.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968909881287516210/boost2.png";
    SuperTurbo.Color      = "e22";
    G_EffectsList.add(SuperTurbo);

    // Fragile
    declare K_BoxEffect Fragile;
    Fragile.Name       = "Fragile";
    Fragile.Marker     = "e_fragile";
    Fragile.TargetMode = "nearest";
    Fragile.Duration   = 10000;
    Fragile.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968910304090148905/fragile.png";
    Fragile.Color      = "d70";
    G_EffectsList.add(Fragile);

    // NoBrake
    declare K_BoxEffect NoBrake;
    NoBrake.Name       = "No Brakes";
    NoBrake.Marker     = "e_nobrake";
    NoBrake.TargetMode = "nearest";
    NoBrake.Duration   = 5000;
    NoBrake.ImageURL   = "https://cdn.discordapp.com/attachments/934577399033647104/968910570763984947/nobrake.png";
    NoBrake.Color      = "ef0";
    G_EffectsList.add(NoBrake);

    // LowGravity
    declare K_BoxEffect LowGravity;
    LowGravity.Name         = "Low Gravity";
    LowGravity.Marker       = "e_low_gravity";
    LowGravity.TargetMode   = "nearest";
    LowGravity.Duration     = 5000;
    LowGravity.ImageURL     = "https://cdn.discordapp.com/attachments/934577399033647104/968911201918668810/lowgravity.png";
    LowGravity.Color        = "0af";
    G_EffectsList.add(LowGravity);

    // SlowMo
    declare K_BoxEffect SlowMo;
    SlowMo.Name         = "Slow Motion";
    SlowMo.Marker       = "e_slowmo";
    SlowMo.TargetMode   = "nearest";
    SlowMo.Duration     = 2500;
    SlowMo.ImageURL     = "https://cdn.discordapp.com/attachments/934577399033647104/968911442105479228/slowmo.png";
    SlowMo.Color        = "aaa";
    G_EffectsList.add(SlowMo);

    // Yeet
    declare K_BoxEffect Yeet;
    Yeet.Name           = "YEEET";
    Yeet.Marker         = "e_turbo2_self";
    Yeet.TargetMode     = "nearest";
    Yeet.Duration       = 3000;
    Yeet.ImageURL       = "https://cdn.discordapp.com/attachments/934577399033647104/968911657126473728/yeet.png";
    Yeet.Color          = "900";
    G_EffectsList.add(Yeet);

    // Ink Splats
    declare K_BoxEffect InkSplats;
    InkSplats.Name           = "Ink Splats";
    InkSplats.Marker         = "e_ink_splats";
    InkSplats.TargetMode     = "nearest";
    InkSplats.ImageURL       = "https://cdn.discordapp.com/attachments/934577399033647104/968988325677522954/ink_icon.png";
    InkSplats.Color          = "000";
    InkSplats.Duration       = 5000;
    G_EffectsList.add(InkSplats);

    // NoGrip
    declare K_BoxEffect NoGrip;
    NoGrip.Name           = "No Grip";
    NoGrip.Marker         = "e_no_grip";
    NoGrip.TargetMode     = "nearest";
    NoGrip.ImageURL       = "https://cdn.discordapp.com/attachments/934577399033647104/969386365156479006/nogrip.png";
    NoGrip.Color          = "0dd";
    NoGrip.Duration       = 5000;
    G_EffectsList.add(NoGrip);

    // No Steer
    declare K_BoxEffect NoSteer;
    NoSteer.Name           = "No Steer";
    NoSteer.Marker         = "e_no_steer";
    NoSteer.TargetMode     = "nearest";
    NoSteer.ImageURL       = "https://cdn.discordapp.com/attachments/934577399033647104/969386365466837033/nosteer.png";
    NoSteer.Color          = "d0d";
    NoSteer.Duration       = 1000;
    G_EffectsList.add(NoSteer);

    Layers::Create("MapName", MapNameLayer::GetManialink());
    Layers::SetType("MapName", CUILayer::EUILayerType::Normal);
    Layers::Attach("MapName");

    Layers::Create("InkSplats", InkSplats::GetManialink());
    Layers::SetType("InkSplats", CUILayer::EUILayerType::Normal);
    Layers::Attach("InkSplats");

    Layers::Create("EffectBox", EffectBoxLayer::GetManialink(G_EffectsList));
    Layers::SetType("EffectBox", CUILayer::EUILayerType::Normal);
    Layers::Attach("EffectBox");

    Layers::Create("PlayerEffects", PlayerEffects::GetManialink());
    Layers::SetType("PlayerEffects", CUILayer::EUILayerType::Normal);
    Layers::Attach("PlayerEffects");

    Layers::Create("GameUI", GameUI::GetManialink());
    Layers::SetType("GameUI", CUILayer::EUILayerType::Normal);
    Layers::Attach("GameUI");

    Layers::Create("EventFeed", EventFeed::GetManialink(8));
    Layers::SetType("EventFeed", CUILayer::EUILayerType::Normal);
    Layers::Attach("EventFeed");

    EventFeed::ClearMessages();
}

Void ActivateOnPlayer(CSmPlayer Player, K_BoxEffect Effect) {
    // check if player effect are full, if so don't try to apply more...
    if (SetPlayer_DelayedIsFull(Player)) return;

    switch(Effect.Marker) {
        case "e_thunder": {
            SetPlayer_Delayed_NoEngine(Player, True);
        }
        case "e_cruise_all": {
            SetPlayer_Delayed_Cruise(Player, True, MathLib::Rand(20., 40.)*10.);
        }
        case "e_turbo_self": {
            SetPlayer_Delayed_BoostUp(Player, True);
        }
        case "e_turbo2_self": {
            SetPlayer_Delayed_Boost2Up(Player, True);
        }
        case "e_fragile": {
            SetPlayer_Delayed_Fragile(Player, True);
        }
        case "e_nobrake": {
            SetPlayer_Delayed_NoBrakes(Player, True);
        }
        case "e_low_gravity": {
            SetPlayer_Delayed_GravityCoef(Player, 0.3);
        }
        case "e_slowmo": {
            SetPlayer_Delayed_SlowMotion(Player, True);
        }
        case "e_no_grip": {
            SetPlayer_Delayed_AdherenceCoef(Player, 0.25);
        }
        case "e_no_steer": {
            SetPlayer_Delayed_NoSteer(Player, True);
        }
        case "e_ink_splats": {
            InkSplats::Splat(Player, Effect.Duration);
        }
    }

    declare K_BoxEffectOnPlayer EffectOnPlayer;
    EffectOnPlayer.Effect = Effect;
    EffectOnPlayer.StartAt = Now;
    EffectOnPlayer.EndAt = EffectOnPlayer.StartAt + Effect.Duration;
    EffectOnPlayer.Login = Player.User.Login;
    G_EffectOnPlayer[TextLib::ToText(EffectOnPlayer.StartAt)] = EffectOnPlayer;

}

Void UnActivateOnPlayer(K_BoxEffectOnPlayer _effectOnPlayer) {
    declare CSmPlayer Player = GetPlayer(_effectOnPlayer.Login);
    if(Player != Null) {
        if (Player.RequestsSpectate == False) {
            switch(_effectOnPlayer.Effect.Marker) {
                case "e_thunder": {
                    SetPlayer_Delayed_NoEngine(Player, False);
                }
                case "e_cruise_all": {
                    SetPlayer_Delayed_Cruise(Player, False, Player.Speed);
                }
                case "e_turbo_self": {
                    SetPlayer_Delayed_BoostUp(Player, False);
                }
                case "e_turbo2_self": {
                    SetPlayer_Delayed_Boost2Up(Player, False);
                }
                case "e_fragile": {
                    SetPlayer_Delayed_Fragile(Player, False);
                }
                case "e_nobrake": {
                    SetPlayer_Delayed_NoBrakes(Player, False);
                }
                case "e_low_gravity": {
                    SetPlayer_Delayed_GravityCoef(Player, 1.0);
                }
                case "e_slowmo": {
                    SetPlayer_Delayed_SlowMotion(Player, False);
                }
                case "e_no_grip":
                {
                    SetPlayer_Delayed_AdherenceCoef(Player, 1.);
                }
                case "e_no_steer":
                {
                    SetPlayer_Delayed_NoSteer(Player, False);
                }
            }
        }
    }
    G_EffectOnPlayer.removekey(TextLib::ToText(_effectOnPlayer.StartAt));
}

Void ClearEffectOnPlayer(CSmPlayer Player) {
    foreach(EffectOnPlayer in G_EffectOnPlayer) {
        if(EffectOnPlayer.Login == Player.User.Login) {
            UnActivateOnPlayer(EffectOnPlayer);
        }
    }
    SetPlayer_Delayed_Reset(Player);
}

Void CleanUp() {
    foreach (Player in AllPlayers) {
        InkSplats::Reset(Player);
    }
    G_PlayerEffect.clear();
}

Void SyncPlayerAvilEffectWithUI(CSmPlayer _player) {
    declare netwrite Text Net_PlayerAvilEffectMarker for _player;
    declare K_BoxEffect PlayerAvilEffect = G_PlayerEffect[_player.User.Login];
    Net_PlayerAvilEffectMarker = PlayerAvilEffect.Name;
}

Void SetPlayerAvilEffect(CSmPlayer _player, Integer _effectIndex) {
    declare K_BoxEffect Effect = GetEffectByIndex(_effectIndex);
    G_PlayerEffect[_player.User.Login] = Effect;
    SyncPlayerAvilEffectWithUI(_player);
}

Void GivePlayerRandomAvilEffect(CSmPlayer _player) {
    G_PlayerEffect[_player.User.Login] = GetRandomEffect();
    SyncPlayerAvilEffectWithUI(_player);
}

CSmPlayer GetNearestPlayer(CSmPlayer _player) {
    declare CSmPlayer NearestPlayer = _player;
    declare Real NearestDistance = 100000.00;
    foreach (Player in Players) {
        if (Player.User.Login != _player.User.Login) {
            declare Real CurrentDistance = MathLib::Abs(MathLib::Distance(Player.Position, _player.Position));
            if (CurrentDistance < NearestDistance) {
                NearestDistance = CurrentDistance;
                NearestPlayer = Player;
            }
        }
    }

    return NearestPlayer;
}

Void OnPlayerActivedEffect(CSmPlayer CurrentPlayer) {
    if (!G_PlayerEffect.existskey(CurrentPlayer.User.Login)) return;

    declare K_BoxEffect AvilEffect = G_PlayerEffect[CurrentPlayer.User.Login];

    if (AvilEffect.Name != "None") {
        switch(AvilEffect.TargetMode) {

            case "first": {
                declare CSmPlayer Player = GetFirstPlayer();
                if (Player != Null) {
                    ActivateOnPlayer(Player, AvilEffect);
                    SetPlayerAvilEffect(Player, 0);
                }
            }

            case "self": {
                ActivateOnPlayer(CurrentPlayer, AvilEffect);
                EventFeed::SendMessage("""$fff ${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff ➔ {{{CurrentPlayer.User.Name}}}""", AvilEffect.ImageURL);
                SetPlayerAvilEffect(CurrentPlayer, 0);
            }

            case "nearest": {
                declare CSmPlayer NearestPlayer = GetNearestPlayer(CurrentPlayer);
                ActivateOnPlayer(NearestPlayer, AvilEffect);
                EventFeed::SendMessage("""$fff ${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff {{{CurrentPlayer.User.Name}}} ➔ {{{NearestPlayer.User.Name}}}""", AvilEffect.ImageURL);
                SetPlayerAvilEffect(CurrentPlayer, 0);
            }

            case "all": {
                foreach(Player in Players) {
                    if (Player.User.Login != CurrentPlayer.User.Login) {
                        ActivateOnPlayer(Player, AvilEffect);
                    }
                }
                EventFeed::SendMessage("""$fff ${{{ AvilEffect.Color }}}{{{ AvilEffect.Name }}}$fff {{{CurrentPlayer.User.Name}}} ➔ Everyone""", AvilEffect.ImageURL);
                SetPlayerAvilEffect(CurrentPlayer, 0);
            }
        }
    }
}

/**
* Processed on event loop
*/
Void Yield() {
    foreach (Player in Players) {
        if(!G_PlayerEffect.existskey(Player.User.Login)) {
            G_PlayerEffect[Player.User.Login] = GetEffectByIndex(0);
            SyncPlayerAvilEffectWithUI(Player);
        }
    }

    foreach (Event in PendingEvents) {
        if (Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint) {
            if (Event.Player != Null) {
                declare K_BoxEffect effect = G_PlayerEffect[Event.Player.User.Login];
                if (Event.IsNewLap) continue; // Don't assign finished player an effect
                if (Event.IsFinish) {
                    SetPlayerAvilEffect(Event.Player, 0); // Remove the effect from the player
                    continue;
                }
                if (effect.Name != "None") continue;
                GivePlayerRandomAvilEffect(Event.Player);   // Try to assign a random effect to the player
            }
        }

        if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
            SetPlayerAvilEffect(Event.Player, 0); // Remove the effect from the player
            PlayerEffects::SendEffectsUrls(Event.Player.User.Login, []);
            ClearEffectOnPlayer(Event.Player);
        }

        if (Event.Type == CSmModeEvent::EType::OnPlayerRemoved) { // Event.Player is Null; Only User available
            G_PlayerEffect.removekey(Event.User.Login);
        }

    }

    foreach (UIEvent in UIManager.PendingEvents) {
        if(UIEvent.CustomEventType == "activate") {
            declare CSmPlayer Player = GetPlayer(UIEvent.UI);
            if(Player == Null) continue;
            OnPlayerActivedEffect(Player);
        }
    }

    declare Text[][Text] Effects;
    foreach(EffectOnPlayer in G_EffectOnPlayer) {
        if (!Effects.existskey(EffectOnPlayer.Login)) {
            Effects[EffectOnPlayer.Login] = [];
        }
        if (Now < EffectOnPlayer.EndAt) {
            Effects[EffectOnPlayer.Login].add(EffectOnPlayer.Effect.ImageURL);
            continue;
        } else {
            UnActivateOnPlayer(EffectOnPlayer);
        }
    }

    foreach(Login => EffectURLs in Effects) {
        PlayerEffects::SendEffectsUrls(Login, EffectURLs);
    }

}
