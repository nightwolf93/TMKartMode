// #RequireContext CSmMlScriptIngame

/**
* You must sync this structure with Libs/TMKart/Effects.Script.txt equalent one
*/
#Struct K_BoxEffect {
    Text        Name;
    Text        Marker;
    Text        TargetMode;
    Integer     Duration;
    Text        Function;
    Text        ImageURL;
    Text        Color;
}

Text Private_GenEffects(K_BoxEffect[] EffectList) {
    declare Text OutXml = "";
    foreach (i => Effect in EffectList) {
        declare Text Pos = "pos=\"0 24\"";
        if (i == 0) Pos = "pos=\"0 0\"";
        OutXml ^= """
        <frame id="{{{ Effect.Name }}}" {{{ Pos }}}>
        <quad pos="0 1" size="19 19" opacity="1" image="{{{ Effect.ImageURL }}}" halign="center" valign="center"/>
        <label pos="0 -9.5" size="20 4" text="{{{ Effect.Name }}}" textfont="GameFontRegular" textsize="2" halign="center" valign="center" />
        </frame>
        """;
    }
    return OutXml;
}

Text GetManialink(K_BoxEffect[] EffectList) {
    declare Text EffectsXml = Private_GenEffects(EffectList);

    return """<?xml version="1.0" encoding="utf-8" standalone="yes"?>
    <manialink version="3">
    <frame pos="0 72.5">
    <frame id="Effects" z-index="-1" size="24 24" halign="center" valign="center">
    {{{ EffectsXml }}}
    </frame>
    <quad pos="0 0" z-index="0" size="25 25" style="Bgs1InRace" substyle="BgColorContour" opacity="0.7" halign="center" valign="center"/>
    <label pos="-11 -13" z-index="10" size="22 5" textprefix="Use Item: " text="" textsize="1" id="infolabel"/>
    <label pos="8 8" z-index="10" size="8 8" halign="center" valign="center2" text="ï‚…"  scriptevents="1" id="Rebind" focusareacolor1="0000" focusareacolor2="04F"/>
    </frame>

    <frame id="dialog" pos="0 30" hidden="1">
    <label id="bindKb" pos="-30 17" z-index="10" size="41 5" halign="left" valign="center" textprefix="Keyboard: "/>
    <label id="bindPad" pos="-29 0" z-index="10" size="41 5" halign="left" valign="center" textprefix="Pad: "/>
    <label id="setPad" pos="-12 -8" z-index="10" size="22 7" text="Set" halign="center" valign="center" scriptevents="1" focusareacolor2="00DDFFFF" focusareacolor1="006C97FF"/><label id="setKb" pos="-12 8" z-index="0" size="22 7" text="Set" halign="center" valign="center" scriptevents="1" focusareacolor2="00DDFFFF" focusareacolor1="006C97FF"/><label id="resetKb" pos="12 8" z-index="0" size="22 7" text="Reset" halign="center" valign="center" scriptevents="1" focusareacolor2="00DDFFFF" focusareacolor1="006C97FF"/><label id="resetPad" pos="12 -8" z-index="0" size="22 7" text="Reset" halign="center" valign="center" scriptevents="1" focusareacolor2="00DDFFFF" focusareacolor1="006C97FF"/><label id="save" pos="0 -22" z-index="0" size="37 7" text="Save" halign="center" valign="center" scriptevents="1" focusareacolor2="00DDFFFF" focusareacolor1="006C97FF"/>
    <quad pos="0 -4" z-index="0" size="70 52" bgcolor="000" opacity="0.7" halign="center" valign="center"/>
    </frame>


    <script><!--
    #Include "TextLib" as TextLib
    #Include "MathLib" as MathLib

    declare CAudioSource G_Sfx;
    declare Text LastEffectName;

    Void SendPlayerActivatedEffect() {
        SendCustomEvent("activate", []);
    }

    Void SetActiveEffect(Text EffectName) {
        declare CMlFrame Frame <=> (Page.GetFirstChild("Effects") as CMlFrame);
        foreach (Elem in Frame.Controls) {
            AnimMgr.Flush(Elem);
            Elem.RelativePosition_V3 = < 0., 24.>;
            if (Elem.ControlId == EffectName) {
                AnimMgr.Add(Elem, "<elem pos=\"0 0\" />", 500, CAnimManager::EAnimManagerEasing::Linear);
            }
        }
    }

    Void SetEffect(Integer Number, Integer Interval) {
        declare CMlFrame Frame <=> (Page.GetFirstChild("Effects") as CMlFrame);
        foreach (i => Elem in Frame.Controls) {
            Elem.Show();
            Elem.RelativePosition_V3 = <0., 24. >;
            if (i == Number) {
                AnimMgr.Flush(Elem);
                AnimMgr.Add(Elem, "<elem pos=\"0 -24\" />", Interval*3, CAnimManager::EAnimManagerEasing::CircOut);
            }
        }
    }


    Void Rebind() {
        declare CMlFrame frame = Page.GetFirstChild("dialog") as CMlFrame;
        declare CMlLabel kbLabel = Page.GetFirstChild("bindKb") as CMlLabel;
        declare CMlLabel padLabel = Page.GetFirstChild("bindPad") as CMlLabel;
        declare Boolean setKb;
        declare Boolean setPad;
        declare Boolean loopActive = True;
        declare persistent Text TMKart_KeyboardItemKey for UserMgr.MainUser = "E";
        declare persistent Text TMKart_PadItemKey for UserMgr.MainUser = "LeftStick";
        frame.Show();
        EnableMenuNavigationInputs = True;
        while(loopActive) {
            yield;
            kbLabel.Value = TMKart_KeyboardItemKey;
            padLabel.Value = TMKart_PadItemKey;

            foreach (Event in PendingEvents) {
                if (Event.Type == CMlScriptEvent::Type::MouseClick) {
                    switch (Event.ControlId) {
                        case "setKb": setKb = True;
                        case "setPad": setPad = True;
                        case "resetKb": TMKart_KeyboardItemKey = "E";
                        case "resetPad": TMKart_PadItemKey = "LeftStick";
                        case "save": {
                            UserMgr.MainUser.PersistentSave();
                            loopActive= False;
                        }
                    }
                }
                if (Event.Type == CMlScriptEvent::Type::KeyPress && Event.KeyName == "Esc") {
                    setKb=False;
                    setPad =False;
                }
                if (setKb && Event.Type == CMlScriptEvent::Type::KeyPress) {
                    setKb=False;
                    TMKart_KeyboardItemKey = Event.KeyName;
                }
            }

            if (setPad) {
                foreach (PadEvent in Input.PendingEvents) {
                    if (PadEvent.Type == CInputEvent::EType::PadButtonPress) {
                        setPad = False;
                        TMKart_PadItemKey = "" ^ TextLib::Replace(""^PadEvent.Button, "::EButton::", "");
                    }
                }
            }
        }
        EnableMenuNavigationInputs = False;
        frame.Hide();
    }

    Void CarouselActiveEffect(Text Effect) {
        declare Text NewEffect = Effect;
        declare Text Net_PlayerAvilEffectMarker for GUIPlayer = "None";
        declare Integer Interval = 200;
        declare Integer TotalInterval = 0;
        declare Integer Steps = 21;
        declare Integer Counter = 0;
        declare Integer StartTime = Now;
        declare CMlFrame Frame <=> (Page.GetFirstChild("Effects") as CMlFrame);
        declare Integer PrevIndex = -1;
        G_Sfx.Play();
        while (True) {
            yield;

            /*if (LastEffectName != Net_PlayerAvilEffectMarker) {
                LastEffectName = Net_PlayerAvilEffectMarker;
                NewEffect = Net_PlayerAvilEffectMarker;
                SetActiveEffect(NewEffect);
                break;
            }*/


            if (Now >= StartTime + TotalInterval) {
                Interval = Counter  * 15;
                TotalInterval += Interval;
                declare rnd = MathLib::Rand(1, Frame.Controls.count-1);
                if (rnd == PrevIndex) rnd = MathLib::Rand(1, Frame.Controls.count-1); // prevent duplicates
                SetEffect(rnd, Interval);
                PrevIndex = rnd;
                Counter += 1;
            }

            if (Counter >= Steps)  {
                SetActiveEffect(NewEffect);
                break;
            }
        }
    }

    main()
    {
        wait(GUIPlayer != Null);
        LastEffectName = "";
        declare netread Text Net_PlayerAvilEffectMarker for GUIPlayer = "None";
        declare persistent Text TMKart_KeyboardItemKey for UserMgr.MainUser = "E";
        declare persistent Text TMKart_PadItemKey for UserMgr.MainUser = "LeftStick";
        declare CMlLabel infoLabel <=> (Page.GetFirstChild("infolabel") as CMlLabel);
        G_Sfx = Audio.CreateSound("https://cdn.discordapp.com/attachments/934577399033647104/969235965719760936/roulette_sfx2.ogg");
        while(True)
        {
            yield;
            infoLabel.Value = TMKart_KeyboardItemKey ^ " or " ^ TMKart_PadItemKey;

            if (LastEffectName != Net_PlayerAvilEffectMarker) {
                LastEffectName = Net_PlayerAvilEffectMarker;
                if (Net_PlayerAvilEffectMarker == "" || Net_PlayerAvilEffectMarker == "None") {
                    SetActiveEffect("None");
                } else {
                    CarouselActiveEffect(Net_PlayerAvilEffectMarker);
                }
            }

            if (Net_PlayerAvilEffectMarker == "None") continue;

            foreach (Event in PendingEvents) {
                if (Event.Type == CMlScriptEvent::Type::MouseClick) {
                    if (Event.ControlId == "Rebind") {
                        Rebind();
                    }
                }

                if (Event.Type == CMlScriptEvent::Type::KeyPress && Event.KeyName == TMKart_KeyboardItemKey) {
                    SendPlayerActivatedEffect();
                }
            }

            foreach (PadEvent in Input.PendingEvents) {
                if (PadEvent.Type == CInputEvent::EType::PadButtonPress) {
                    if ( TextLib::Replace(""^PadEvent.Button, "::EButton::", "") == TMKart_PadItemKey) {
                        SendPlayerActivatedEffect();
                    }
                }
            }
        }
    }
    --></script>
    </manialink>""";
}